@page "/aportes"
@page "/aportes/{AporteId:int}"

@inject AportesBLL aportesBLL
@inject NotificationService notifications

<EditForm Model="aportes" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Registro de Prestamos</h3>
        </div>
        <div class="card-body">
            <div class="container overflow-hidden">
                <div class="row gy-6">

                    @*Aportes ID*@
                    <label>Aportes ID</label>
                    <div class="form-r ow align-items-center">
                        <div class="col">
                            <div class="form-group">
                                <div class="input-group">
                                    <InputNumber @bind-Value="aportes.AporteId" class="form-control" />
                                    <div class="input-group-append">
                                        <button class="bi bi-search btn btn-outline-primary" type="button" @onclick="Buscar"> <i class="oi oi-magnifying-glass" /></button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    @*Fecha*@
                    <div class="mb-3">
                        <label>Fecha</label>
                        <InputDate @bind-Value="aportes.Fecha" class="form-control" />
                        <ValidationMessage For="@(() => aportes.Fecha)" />
                    </div>

                    @*Persona*@
                    <div class="mb-3">
                        <label>Persona</label>
                        <InputText @bind-Value="aportes.Persona" class="form-control" />
                        <ValidationMessage For="@(() => aportes.Persona)" />
                    </div>

                    @*Observacion*@
                    <div class="mb-3">
                        <label>Observacion</label>
                        <InputText @bind-Value="aportes.Observacion" class="form-control" />
                        <ValidationMessage For="@(() => aportes.Observacion)" />
                    </div>

                    @*Monto*@
                    <div class="mb-3">
                        <label>Monto</label>
                        <InputNumber @bind-Value="aportes.Monto" class="form-control" />
                        <ValidationMessage For="@(() => aportes.Monto)" />
                    </div>
                </div>
            </div>
        </div>

        <div class="card-footer d-flex justify-content-center">
            <div class="btn-group" role="group">
                <button type="button" class="btn btn-primary" @onclick="Nuevo"> <i class="oi oi-file" /> Nuevo </button>
                <button type="submit" class="btn btn-success"> <i class="oi oi-document" /> Guardar </button>
                <button type="button" class="btn btn-danger" @onclick="Eliminar"><i class="oi oi-trash" /> Eliminar </button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int AporteId { get; set; }
    public Aportes aportes { get; set; } = new Aportes();
    public String mensaje { get; set; } = "";

    protected override void OnInitialized()
    {
        if (AporteId > 0)
        {
            this.aportes.AporteId = AporteId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        aportes = new Aportes();
        aportes.Fecha = DateTime.Now;
    }

    public bool Validar()
    {
        if(aportes.AporteId == aportes.AporteId)
        {
            return false;
        }else{
            return true;
        }
    }
    public void Guardar()
    {
        if(!Validar())
        {
            notifications.ShowNotification("No fue guardado, intentar nuevamente.", NotificationSeverity.Error);
        }

        bool guardo = aportesBLL.Guardar(aportes);

        if(guardo)
        {
            Nuevo();
            notifications.ShowNotification("Fue guardado correctamente.");
        }else
        {
            notifications.ShowNotification("No fue guardado, intentar nuevamente.", NotificationSeverity.Error);
        }
    }

    private void Eliminar()
    {
        bool elimino = aportesBLL.Eliminar(aportes);

        if(elimino)
        {
            Nuevo();
            notifications.ShowNotification("Fue eliminado correctamente.");
        }
        else{
            notifications.ShowNotification("No fue eliminado, intentar nuevamente.", NotificationSeverity.Error);
        }
    }
    private void Buscar()
    {
        if (aportes.AporteId > 0)
        {
            var encontrado = aportesBLL.Buscar(aportes.AporteId);
            if (encontrado != null)
            {
                this.aportes = encontrado;
                notifications.ShowNotification("Fue encontrado correctamente.");
            }else{
                notifications.ShowNotification("Registro no encontrado", NotificationSeverity.Error);
            }
        }
    }
}