@page "/registros"
@page "/registros/{RegistroId:int}"

@inject AportesBLL aportesBLL
@inject NotificationService notificationService

<EditForm Model="aportes" OnValidSubmit="Guardar">
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="card">
        <div class="card-header text-center">
            <h3>Registros de Aportes</h3>
        </div>
        <div class="card-body">

            @*Aporte Id*@
            <div class="form-r ow align-items-center">
                <div class="col">
                    <div class="mb-3">
                        <label>RegistrosId</label>
                        <div class="input-group">
                            <InputNumber @bind-Value="aportes.AporteId" class="form-control col-4" />
                            <div class="input-group-append">
                                <button type="button" class="bi bi-search btn btn-primary input-group-text" @onclick="Buscar"> Buscar</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            @*Fecha*@
            <div class="mb-3">
                <label>Fecha de Inicio</label>
                <InputDate @bind-Value="aportes.Fecha" class="form-control" />
                <ValidationMessage For="@(() => aportes.Fecha)" />
            </div>

            @*Persona*@
            <div class="mb-3">
                <label>Persona</label>
                <InputText @bind-Value="aportes.Persona" class="form-control" />
                <ValidationMessage For="@(() => aportes.Persona)" />
            </div>

            @*Observacion*@
            <div class="mb-3">
                <label>Observacion</label>
                <InputDate @bind-Value="aportes.Observacion" class="form-control" />
                <ValidationMessage For="@(() => aportes.Observacion)" />
            </div>

            @*Monto*@
            <div class="mb-3">
                <label>Monto</label>
                <InputDate @bind-Value="aportes.Monto" class="form-control" />
                <ValidationMessage For="@(() => aportes.Monto)" />
            </div>
        </div>

        <div class="card-footer">
            <div class="form-group text-center" display: inline-block>
                <button type="submit" class="bi bi-file-earmark-fill btn btn-lg btn-primary"> Nuevo</button>
                <button type="submit" class="bi bi-file-earmark-text-fill btn btn-lg btn-success"> Guardar</button>
                <button type="submit" class="bi bi-trash btn btn-lg btn-danger"> Eliminar</button>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [Parameter]
    public int AporteId { get; set; }
    public Aportes aportes { get; set; } = new Aportes();
    public String mensaje { get; set; } = "";

    protected override void OnInitialized()
    {
        if (AporteId > 0)
        {
            this.aportes.AporteId = AporteId;
            this.Buscar();
        }
    }

    public void Nuevo()
    {
        aportes = new Aportes();
        aportes.Fecha = DateTime.Now;
    }
    
    public void Guardar()
    {
        bool guardo = aportesBLL.Guardar(aportes);

        if(guardo)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Guardado correctamente"
            });
            
        }else{
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No se guardo correctamente"
            });
        }
    }

    private void Eliminar()
    {
        bool elimino = aportesBLL.Eliminar(aportes);

        if(elimino)
        {
            Nuevo();
            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Success,
                Summary = "Se elimino correctamente"
            });

        }else{

            ShowNotification(
            new NotificationMessage
            {
                Severity = NotificationSeverity.Error,
                Summary = "No se elimino correctamente"
            });
        }
    }
    private void Buscar()
    {
        if (aportes.AporteId> 0)
        {
            var encontrado = aportesBLL.Buscar(aportes.AporteId);
            if (encontrado != null)
                this.aportes = encontrado;

                ShowNotification(
                new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Se encontraron los datos correctamente"
                });
        }
    }

    void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }
}